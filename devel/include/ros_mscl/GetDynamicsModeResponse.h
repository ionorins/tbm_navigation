// Generated by gencpp from file ros_mscl/GetDynamicsModeResponse.msg
// DO NOT EDIT!


#ifndef ROS_MSCL_MESSAGE_GETDYNAMICSMODERESPONSE_H
#define ROS_MSCL_MESSAGE_GETDYNAMICSMODERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_mscl
{
template <class ContainerAllocator>
struct GetDynamicsModeResponse_
{
  typedef GetDynamicsModeResponse_<ContainerAllocator> Type;

  GetDynamicsModeResponse_()
    : mode(0)
    , success(false)  {
    }
  GetDynamicsModeResponse_(const ContainerAllocator& _alloc)
    : mode(0)
    , success(false)  {
  (void)_alloc;
    }



   typedef int8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _success_type;
  _success_type success;





  typedef boost::shared_ptr< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetDynamicsModeResponse_

typedef ::ros_mscl::GetDynamicsModeResponse_<std::allocator<void> > GetDynamicsModeResponse;

typedef boost::shared_ptr< ::ros_mscl::GetDynamicsModeResponse > GetDynamicsModeResponsePtr;
typedef boost::shared_ptr< ::ros_mscl::GetDynamicsModeResponse const> GetDynamicsModeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator1> & lhs, const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.success == rhs.success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator1> & lhs, const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_mscl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4315dfa070d15c7ffc8d87836f8ad09c";
  }

  static const char* value(const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4315dfa070d15c7fULL;
  static const uint64_t static_value2 = 0xfc8d87836f8ad09cULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_mscl/GetDynamicsModeResponse";
  }

  static const char* value(const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 mode\n"
"bool success\n"
"\n"
;
  }

  static const char* value(const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetDynamicsModeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_mscl::GetDynamicsModeResponse_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MSCL_MESSAGE_GETDYNAMICSMODERESPONSE_H
