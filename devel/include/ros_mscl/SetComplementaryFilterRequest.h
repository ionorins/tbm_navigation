// Generated by gencpp from file ros_mscl/SetComplementaryFilterRequest.msg
// DO NOT EDIT!


#ifndef ROS_MSCL_MESSAGE_SETCOMPLEMENTARYFILTERREQUEST_H
#define ROS_MSCL_MESSAGE_SETCOMPLEMENTARYFILTERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_mscl
{
template <class ContainerAllocator>
struct SetComplementaryFilterRequest_
{
  typedef SetComplementaryFilterRequest_<ContainerAllocator> Type;

  SetComplementaryFilterRequest_()
    : north_comp_enable(0)
    , up_comp_enable(0)
    , north_comp_time_const(0.0)
    , up_comp_time_const(0.0)  {
    }
  SetComplementaryFilterRequest_(const ContainerAllocator& _alloc)
    : north_comp_enable(0)
    , up_comp_enable(0)
    , north_comp_time_const(0.0)
    , up_comp_time_const(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _north_comp_enable_type;
  _north_comp_enable_type north_comp_enable;

   typedef int8_t _up_comp_enable_type;
  _up_comp_enable_type up_comp_enable;

   typedef float _north_comp_time_const_type;
  _north_comp_time_const_type north_comp_time_const;

   typedef float _up_comp_time_const_type;
  _up_comp_time_const_type up_comp_time_const;





  typedef boost::shared_ptr< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetComplementaryFilterRequest_

typedef ::ros_mscl::SetComplementaryFilterRequest_<std::allocator<void> > SetComplementaryFilterRequest;

typedef boost::shared_ptr< ::ros_mscl::SetComplementaryFilterRequest > SetComplementaryFilterRequestPtr;
typedef boost::shared_ptr< ::ros_mscl::SetComplementaryFilterRequest const> SetComplementaryFilterRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator1> & lhs, const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator2> & rhs)
{
  return lhs.north_comp_enable == rhs.north_comp_enable &&
    lhs.up_comp_enable == rhs.up_comp_enable &&
    lhs.north_comp_time_const == rhs.north_comp_time_const &&
    lhs.up_comp_time_const == rhs.up_comp_time_const;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator1> & lhs, const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_mscl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "45ff6c0b3e0fce49632971cc1d368393";
  }

  static const char* value(const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x45ff6c0b3e0fce49ULL;
  static const uint64_t static_value2 = 0x632971cc1d368393ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_mscl/SetComplementaryFilterRequest";
  }

  static const char* value(const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 north_comp_enable\n"
"int8 up_comp_enable\n"
"float32 north_comp_time_const\n"
"float32 up_comp_time_const\n"
"\n"
;
  }

  static const char* value(const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.north_comp_enable);
      stream.next(m.up_comp_enable);
      stream.next(m.north_comp_time_const);
      stream.next(m.up_comp_time_const);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetComplementaryFilterRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_mscl::SetComplementaryFilterRequest_<ContainerAllocator>& v)
  {
    s << indent << "north_comp_enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.north_comp_enable);
    s << indent << "up_comp_enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.up_comp_enable);
    s << indent << "north_comp_time_const: ";
    Printer<float>::stream(s, indent + "  ", v.north_comp_time_const);
    s << indent << "up_comp_time_const: ";
    Printer<float>::stream(s, indent + "  ", v.up_comp_time_const);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MSCL_MESSAGE_SETCOMPLEMENTARYFILTERREQUEST_H
